/*
 * Generated by @ch2ts/core
 * Options: {"emitZod":true}
 */
import { z } from 'zod';

export interface SolanaSwapsRaw {
    /** Original: DateTime */
    timestamp: string;
    /** Original: LowCardinality(String) */
    dex: string;
    /** Original: String */
    tokenA: string;
    /** Original: String */
    tokenB: string;
    /** Original: Float64 */
    amountA: number;
    /** Original: Float64 */
    amountB: number;
    /** Original: Float64 */
    tokenAUsdcPrice: number;
    /** Original: Float64 */
    tokenBUsdcPrice: number;
    /** Original: Float64 */
    tokenABalance: number;
    /** Original: Float64 */
    tokenAAcquisitionCostUsd: number;
    /** Original: Float64 */
    tokenBBalance: number;
    /** Original: Float64 */
    tokenBAcquisitionCostUsd: number;
    /** Original: Float64 */
    tokenAProfitUsdc: number;
    /** Original: Float64 */
    tokenBProfitUsdc: number;
    /** Original: Float64 */
    tokenACostUsdc: number;
    /** Original: Float64 */
    tokenBCostUsdc: number;
    /** Original: String */
    account: string;
    /** Original: UInt32 */
    blockNumber: number;
    /** Original: UInt16 */
    transactionIndex: number;
    /** Original: Array(UInt16) */
    instructionAddress: number[];
    /** Original: String */
    transactionHash: string;
    /** Original: Float64 */
    slippage: number;
    /** Original: Float64 */
    poolTokenAReserve: number;
    /** Original: Float64 */
    poolTokenBReserve: number;
    /** Original: Float64 */
    poolTvl: number;
}

export const SolanaSwapsRawSchema = z.object({ timestamp: z.string(), dex: z.string(), tokenA: z.string(), tokenB: z.string(), amountA: z.number(), amountB: z.number(), tokenAUsdcPrice: z.number(), tokenBUsdcPrice: z.number(), tokenABalance: z.number(), tokenAAcquisitionCostUsd: z.number(), tokenBBalance: z.number(), tokenBAcquisitionCostUsd: z.number(), tokenAProfitUsdc: z.number(), tokenBProfitUsdc: z.number(), tokenACostUsdc: z.number(), tokenBCostUsdc: z.number(), account: z.string(), blockNumber: z.number(), transactionIndex: z.number(), instructionAddress: z.array(z.number()), transactionHash: z.string(), slippage: z.number(), poolTokenAReserve: z.number(), poolTokenBReserve: z.number(), poolTvl: z.number() });
