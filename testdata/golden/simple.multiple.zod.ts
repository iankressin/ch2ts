/*
 * Generated by @ch2ts/core
 * Options: {"emitZod":true}
 */
import { z } from "zod";

export interface SolanaSwapsRaw {
  /** Original: DateTime */
  timestamp: string;
  /** Original: LowCardinality(String) */
  dex: string;
  /** Original: String */
  tokenA: string;
  /** Original: String */
  tokenB: string;
  /** Original: Float64 */
  amountA: number;
  /** Original: Float64 */
  amountB: number;
  /** Original: Float64 */
  tokenAUsdcPrice: number;
  /** Original: Float64 */
  tokenBUsdcPrice: number;
  /** Original: Float64 */
  tokenABalance: number;
  /** Original: Float64 */
  tokenAAcquisitionCostUsd: number;
  /** Original: Float64 */
  tokenBBalance: number;
  /** Original: Float64 */
  tokenBAcquisitionCostUsd: number;
  /** Original: Float64 */
  tokenAProfitUsdc: number;
  /** Original: Float64 */
  tokenBProfitUsdc: number;
  /** Original: Float64 */
  tokenACostUsdc: number;
  /** Original: Float64 */
  tokenBCostUsdc: number;
  /** Original: String */
  account: string;
  /** Original: UInt32 */
  blockNumber: number;
  /** Original: UInt16 */
  transactionIndex: number;
  /** Original: Array(UInt16) */
  instructionAddress: number[];
  /** Original: String */
  transactionHash: string;
  /** Original: Float64 */
  slippage: number;
  /** Original: Float64 */
  poolTokenAReserve: number;
  /** Original: Float64 */
  poolTokenBReserve: number;
  /** Original: Float64 */
  poolTvl: number;
}

export const SolanaSwapsRawSchema = z.object({
    timestamp: z.string(),
    dex: z.string(),
    tokenA: z.string(),
    tokenB: z.string(),
    amountA: z.number(),
    amountB: z.number(),
    tokenAUsdcPrice: z.number(),
    tokenBUsdcPrice: z.number(),
    tokenABalance: z.number(),
    tokenAAcquisitionCostUsd: z.number(),
    tokenBBalance: z.number(),
    tokenBAcquisitionCostUsd: z.number(),
    tokenAProfitUsdc: z.number(),
    tokenBProfitUsdc: z.number(),
    tokenACostUsdc: z.number(),
    tokenBCostUsdc: z.number(),
    account: z.string(),
    blockNumber: z.number(),
    transactionIndex: z.number(),
    instructionAddress: z.array(z.number()),
    transactionHash: z.string(),
    slippage: z.number(),
    poolTokenAReserve: z.number(),
    poolTokenBReserve: z.number(),
    poolTvl: z.number(),
  });

export interface SolanaDexSwaps5mCandles {
  /** Original: DateTime */
  timestamp: string;
  /** Original: Unknown */
  poolAddress: unknown;
  /** Original: String */
  tokenA: string;
  /** Original: String */
  tokenB: string;
  /** Original: LowCardinality(String) */
  dex: string;
  /** Original: Float64 */
  openTokenA: number;
  /** Original: Float64 */
  highTokenA: number;
  /** Original: Float64 */
  lowTokenA: number;
  /** Original: Float64 */
  closeTokenA: number;
  /** Original: Float64 */
  openTokenB: number;
  /** Original: Float64 */
  highTokenB: number;
  /** Original: Float64 */
  lowTokenB: number;
  /** Original: Float64 */
  closeTokenB: number;
  /** Original: Unknown */
  count: unknown;
  /** Original: Float64 */
  volumeUsdc: number;
  /** Original: Float64 */
  avgSlippage: number;
  /** Original: Float64 */
  maxPoolTvl: number;
  /** Original: Float64 */
  poolTvlVolumeRatio: number;
}

export const SolanaDexSwaps5mCandlesSchema = z.object({
    timestamp: z.string(),
    poolAddress: z.any(),
    tokenA: z.string(),
    tokenB: z.string(),
    dex: z.string(),
    openTokenA: z.number(),
    highTokenA: z.number(),
    lowTokenA: z.number(),
    closeTokenA: z.number(),
    openTokenB: z.number(),
    highTokenB: z.number(),
    lowTokenB: z.number(),
    closeTokenB: z.number(),
    count: z.any(),
    volumeUsdc: z.number(),
    avgSlippage: z.number(),
    maxPoolTvl: z.number(),
    poolTvlVolumeRatio: z.number(),
  });

export interface SolanaDexSwaps1hCandles {
  /** Original: DateTime */
  timestamp: string;
  /** Original: Unknown */
  poolAddress: unknown;
  /** Original: String */
  tokenA: string;
  /** Original: String */
  tokenB: string;
  /** Original: LowCardinality(String) */
  dex: string;
  /** Original: Float64 */
  openTokenA: number;
  /** Original: Float64 */
  highTokenA: number;
  /** Original: Float64 */
  lowTokenA: number;
  /** Original: Float64 */
  closeTokenA: number;
  /** Original: Float64 */
  openTokenB: number;
  /** Original: Float64 */
  highTokenB: number;
  /** Original: Float64 */
  lowTokenB: number;
  /** Original: Float64 */
  closeTokenB: number;
  /** Original: Unknown */
  count: unknown;
  /** Original: Float64 */
  volumeUsdc: number;
  /** Original: Float64 */
  avgSlippage: number;
  /** Original: Float64 */
  maxPoolTvl: number;
  /** Original: Float64 */
  poolTvlVolumeRatio: number;
}

export const SolanaDexSwaps1hCandlesSchema = z.object({
    timestamp: z.string(),
    poolAddress: z.any(),
    tokenA: z.string(),
    tokenB: z.string(),
    dex: z.string(),
    openTokenA: z.number(),
    highTokenA: z.number(),
    lowTokenA: z.number(),
    closeTokenA: z.number(),
    openTokenB: z.number(),
    highTokenB: z.number(),
    lowTokenB: z.number(),
    closeTokenB: z.number(),
    count: z.any(),
    volumeUsdc: z.number(),
    avgSlippage: z.number(),
    maxPoolTvl: z.number(),
    poolTvlVolumeRatio: z.number(),
  });

export interface SolanaAccountTradesDaily {
  /** Original: DateTime */
  timestamp: string;
  /** Original: String */
  token: string;
  /** Original: String */
  account: string;
  /** Original: Float64 */
  buyCount: number;
  /** Original: Float64 */
  sellCount: number;
  /** Original: Float64 */
  buyAmount: number;
  /** Original: Float64 */
  sellAmount: number;
  /** Original: Float64 */
  buyAmountUsdc: number;
  /** Original: Float64 */
  sellAmountUsdc: number;
  /** Original: Float64 */
  profitUsdc: number;
  /** Original: Float64 */
  costUsdc: number;
  /** Original: Float64 */
  balance: number;
  /** Original: Float64 */
  acquisitionCostUsd: number;
}

export const SolanaAccountTradesDailySchema = z.object({
    timestamp: z.string(),
    token: z.string(),
    account: z.string(),
    buyCount: z.number(),
    sellCount: z.number(),
    buyAmount: z.number(),
    sellAmount: z.number(),
    buyAmountUsdc: z.number(),
    sellAmountUsdc: z.number(),
    profitUsdc: z.number(),
    costUsdc: z.number(),
    balance: z.number(),
    acquisitionCostUsd: z.number(),
  });
